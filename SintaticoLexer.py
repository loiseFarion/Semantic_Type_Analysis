# Generated from Sintatico.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,31,175,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,1,1,1,
        1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,
        1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,
        13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
        16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,
        21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,4,25,134,8,
        25,11,25,12,25,135,1,25,1,25,4,25,140,8,25,11,25,12,25,141,3,25,
        144,8,25,1,25,1,25,4,25,148,8,25,11,25,12,25,149,3,25,152,8,25,1,
        26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,
        29,1,29,1,30,4,30,170,8,30,11,30,12,30,171,1,30,1,30,0,0,31,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,1,0,2,1,0,48,57,3,0,9,10,13,
        13,32,32,180,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,1,63,1,0,0,0,3,65,1,0,0,0,5,67,1,0,0,0,7,69,
        1,0,0,0,9,71,1,0,0,0,11,73,1,0,0,0,13,75,1,0,0,0,15,77,1,0,0,0,17,
        79,1,0,0,0,19,81,1,0,0,0,21,85,1,0,0,0,23,89,1,0,0,0,25,93,1,0,0,
        0,27,95,1,0,0,0,29,98,1,0,0,0,31,101,1,0,0,0,33,108,1,0,0,0,35,111,
        1,0,0,0,37,113,1,0,0,0,39,115,1,0,0,0,41,118,1,0,0,0,43,121,1,0,
        0,0,45,124,1,0,0,0,47,126,1,0,0,0,49,129,1,0,0,0,51,151,1,0,0,0,
        53,153,1,0,0,0,55,159,1,0,0,0,57,161,1,0,0,0,59,166,1,0,0,0,61,169,
        1,0,0,0,63,64,5,40,0,0,64,2,1,0,0,0,65,66,5,41,0,0,66,4,1,0,0,0,
        67,68,5,43,0,0,68,6,1,0,0,0,69,70,5,45,0,0,70,8,1,0,0,0,71,72,5,
        42,0,0,72,10,1,0,0,0,73,74,5,47,0,0,74,12,1,0,0,0,75,76,5,124,0,
        0,76,14,1,0,0,0,77,78,5,37,0,0,78,16,1,0,0,0,79,80,5,94,0,0,80,18,
        1,0,0,0,81,82,5,77,0,0,82,83,5,69,0,0,83,84,5,77,0,0,84,20,1,0,0,
        0,85,86,5,82,0,0,86,87,5,69,0,0,87,88,5,83,0,0,88,22,1,0,0,0,89,
        90,5,102,0,0,90,91,5,111,0,0,91,92,5,114,0,0,92,24,1,0,0,0,93,94,
        5,105,0,0,94,26,1,0,0,0,95,96,5,105,0,0,96,97,5,102,0,0,97,28,1,
        0,0,0,98,99,5,105,0,0,99,100,5,110,0,0,100,30,1,0,0,0,101,102,5,
        110,0,0,102,103,5,111,0,0,103,104,5,116,0,0,104,105,5,32,0,0,105,
        106,5,105,0,0,106,107,5,110,0,0,107,32,1,0,0,0,108,109,5,61,0,0,
        109,110,5,61,0,0,110,34,1,0,0,0,111,112,5,60,0,0,112,36,1,0,0,0,
        113,114,5,62,0,0,114,38,1,0,0,0,115,116,5,60,0,0,116,117,5,61,0,
        0,117,40,1,0,0,0,118,119,5,62,0,0,119,120,5,61,0,0,120,42,1,0,0,
        0,121,122,5,33,0,0,122,123,5,61,0,0,123,44,1,0,0,0,124,125,5,61,
        0,0,125,46,1,0,0,0,126,127,5,43,0,0,127,128,5,61,0,0,128,48,1,0,
        0,0,129,130,5,45,0,0,130,131,5,61,0,0,131,50,1,0,0,0,132,134,7,0,
        0,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,1,0,
        0,0,136,143,1,0,0,0,137,139,5,46,0,0,138,140,7,0,0,0,139,138,1,0,
        0,0,140,141,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,144,1,0,
        0,0,143,137,1,0,0,0,143,144,1,0,0,0,144,152,1,0,0,0,145,147,5,46,
        0,0,146,148,7,0,0,0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,1,0,
        0,0,149,150,1,0,0,0,150,152,1,0,0,0,151,133,1,0,0,0,151,145,1,0,
        0,0,152,52,1,0,0,0,153,154,5,114,0,0,154,155,5,97,0,0,155,156,5,
        110,0,0,156,157,5,103,0,0,157,158,5,101,0,0,158,54,1,0,0,0,159,160,
        5,58,0,0,160,56,1,0,0,0,161,162,5,101,0,0,162,163,5,108,0,0,163,
        164,5,115,0,0,164,165,5,101,0,0,165,58,1,0,0,0,166,167,5,36,0,0,
        167,60,1,0,0,0,168,170,7,1,0,0,169,168,1,0,0,0,170,171,1,0,0,0,171,
        169,1,0,0,0,171,172,1,0,0,0,172,173,1,0,0,0,173,174,6,30,0,0,174,
        62,1,0,0,0,7,0,135,141,143,149,151,171,1,6,0,0
    ]

class SintaticoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LPAREN = 1
    RPAREN = 2
    PLUS = 3
    MINUS = 4
    MULTIPLY = 5
    DIVIDE = 6
    MODULO = 7
    PERCENT = 8
    POWER = 9
    MEM = 10
    RES = 11
    FOR = 12
    I = 13
    IF = 14
    IN = 15
    NOT_IN = 16
    EQUALS = 17
    LESS_THAN = 18
    GREATER_THAN = 19
    LESS_THAN_OR_EQUAL = 20
    GREATER_THAN_OR_EQUAL = 21
    NOT_EQUALS = 22
    ASSIGN = 23
    INCREMENT = 24
    DECREMENT = 25
    NUM = 26
    RANGE = 27
    DOISPONTOS = 28
    ELSE = 29
    VAZIO = 30
    WS = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'|'", "'%'", "'^'", 
            "'MEM'", "'RES'", "'for'", "'i'", "'if'", "'in'", "'not in'", 
            "'=='", "'<'", "'>'", "'<='", "'>='", "'!='", "'='", "'+='", 
            "'-='", "'range'", "':'", "'else'", "'$'" ]

    symbolicNames = [ "<INVALID>",
            "LPAREN", "RPAREN", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", 
            "PERCENT", "POWER", "MEM", "RES", "FOR", "I", "IF", "IN", "NOT_IN", 
            "EQUALS", "LESS_THAN", "GREATER_THAN", "LESS_THAN_OR_EQUAL", 
            "GREATER_THAN_OR_EQUAL", "NOT_EQUALS", "ASSIGN", "INCREMENT", 
            "DECREMENT", "NUM", "RANGE", "DOISPONTOS", "ELSE", "VAZIO", 
            "WS" ]

    ruleNames = [ "LPAREN", "RPAREN", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", 
                  "MODULO", "PERCENT", "POWER", "MEM", "RES", "FOR", "I", 
                  "IF", "IN", "NOT_IN", "EQUALS", "LESS_THAN", "GREATER_THAN", 
                  "LESS_THAN_OR_EQUAL", "GREATER_THAN_OR_EQUAL", "NOT_EQUALS", 
                  "ASSIGN", "INCREMENT", "DECREMENT", "NUM", "RANGE", "DOISPONTOS", 
                  "ELSE", "VAZIO", "WS" ]

    grammarFileName = "Sintatico.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


